
P1nr2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007dd  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fc  00000000  00000000  000009b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002df  00000000  00000000  000010ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b0  00000000  00000000  000017d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  78:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z10initDTimerv>:
#include <avr/io.h>
#include <util/delay.h>


void initDTimer(){
	DDRD |= 0x0;										// Init DDRD, god praksis
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8a b9       	out	0x0a, r24	; 10
	DDRD |= 1 << PD6;									// Init PD6
  84:	8a b1       	in	r24, 0x0a	; 10
  86:	80 64       	ori	r24, 0x40	; 64
  88:	8a b9       	out	0x0a, r24	; 10
	TCCR0A |= 1 << WGM00 | 1 << WGM01 | 1 << COM0A1;    // Tjall
  8a:	84 b5       	in	r24, 0x24	; 36
  8c:	83 68       	ori	r24, 0x83	; 131
  8e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 1 << CS00;								// Tjall 2
  90:	85 b5       	in	r24, 0x25	; 37
  92:	81 60       	ori	r24, 0x01	; 1
  94:	85 bd       	out	0x25, r24	; 37
  96:	08 95       	ret

00000098 <_Z12SetPWMoutputi>:
}

void SetPWMoutput(int duty)
{
	OCR0A = duty;
  98:	87 bd       	out	0x27, r24	; 39
  9a:	08 95       	ret

0000009c <main>:
}

int main(void)
{
	initDTimer();
  9c:	0e 94 40 00 	call	0x80	; 0x80 <_Z10initDTimerv>
	// Høy frekvens = rask
	// Lav frekvens = treig

    while (1) 
    {
		for(brightness = 0; brightness < 40; brightness++)
  a0:	c0 e0       	ldi	r28, 0x00	; 0
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	c8 32       	cpi	r28, 0x28	; 40
  a6:	d1 05       	cpc	r29, r1
  a8:	5c f4       	brge	.+22     	; 0xc0 <main+0x24>
		{
			SetPWMoutput(brightness);
  aa:	ce 01       	movw	r24, r28
  ac:	0e 94 4c 00 	call	0x98	; 0x98 <_Z12SetPWMoutputi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	87 e8       	ldi	r24, 0x87	; 135
  b2:	93 e1       	ldi	r25, 0x13	; 19
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x18>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x1e>
  ba:	00 00       	nop
	// Høy frekvens = rask
	// Lav frekvens = treig

    while (1) 
    {
		for(brightness = 0; brightness < 40; brightness++)
  bc:	21 96       	adiw	r28, 0x01	; 1
  be:	f2 cf       	rjmp	.-28     	; 0xa4 <main+0x8>
  c0:	c8 e2       	ldi	r28, 0x28	; 40
  c2:	d0 e0       	ldi	r29, 0x00	; 0
		{
			SetPWMoutput(brightness);
			_delay_ms(1);
		}
		for(brightness = 40; brightness > 0; brightness--)
  c4:	1c 16       	cp	r1, r28
  c6:	1d 06       	cpc	r1, r29
  c8:	5c f7       	brge	.-42     	; 0xa0 <main+0x4>
		{
			SetPWMoutput(brightness);
  ca:	ce 01       	movw	r24, r28
  cc:	0e 94 4c 00 	call	0x98	; 0x98 <_Z12SetPWMoutputi>
  d0:	87 e8       	ldi	r24, 0x87	; 135
  d2:	93 e1       	ldi	r25, 0x13	; 19
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x38>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x3e>
  da:	00 00       	nop
		for(brightness = 0; brightness < 40; brightness++)
		{
			SetPWMoutput(brightness);
			_delay_ms(1);
		}
		for(brightness = 40; brightness > 0; brightness--)
  dc:	21 97       	sbiw	r28, 0x01	; 1
  de:	f2 cf       	rjmp	.-28     	; 0xc4 <main+0x28>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
